{"version":3,"sources":["components/GenericButton.js","components/Activable.js","components/Simple.js","components/ClickMe.js","components/CloseModal.js","components/Input.js","components/App.js","serviceWorker.js","index.js"],"names":["track","callback","useCallback","string","String","replace","stringify","console","log","concat","apply","arguments","style","border","borderRadius","cursor","display","fontSize","margin","padding","GenericButton","_ref","component","children","onClick","enhancement","Object","objectWithoutProperties","Button","props","react_default","a","createElement","assign","pieces","displayName","Activable","active","components_GenericButton","disabled","defaultProps","Simple","components_Activable","window","alert","_ref2","objectSpread","background","ClickMe","CloseModal","parseInt","URL","Input","_useState","useState","_useState2","slicedToArray","loading","setLoading","load","useEffect","src","Image","addEventListener","type","alt","onMouseOver","onMouseOut","App","setActive","react","current","components_Simple","components_ClickMe","components_CloseModal","components_Input","Boolean","location","hostname","match","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAoBMA,EAAQ,SAAAC,GAAQ,OACpBC,sBACE,kBATUC,EALI,SAAAF,GAAQ,OACxBG,OAAOH,GACJI,QAAQ,YAAa,IACrBA,QAAQ,OAAQ,KAWIC,CAAUL,GARjCM,QAAQC,IAAR,mBAAAC,OACqBN,EADrB,oBAEE,wEACA,uFAK6CF,EAAQS,WAAR,EAAAC,WATnC,IAAAR,GAUV,CAACF,KAGCW,EAAQ,CACZC,OAAQ,kBACRC,aAAc,MACdC,OAAQ,UACRC,QAAS,QACTC,SAAU,OACVC,OAAQ,SACRC,QAAS,QAwBIC,EArBO,SAAAC,GAA2C,IA/BhDC,EA+BQC,EAAwCF,EAAxCE,SAAUC,EAA8BH,EAA9BG,QAAYC,EAAkBC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,wBACzDO,EAAS,SAAAC,GAAK,OAClBC,EAAAC,EAAAC,cAAA,SAAAN,OAAAO,OAAA,CACET,QAASxB,EAAMwB,GACfZ,MAAOA,GACHiB,EACAJ,KAGFS,EAAS,CAAEN,SAAQ5B,QAAOY,SAEhC,MA5C8C,oBA4C3BW,EACfS,yBA3CWV,EA2CYC,EA1C3BG,OAAOO,OAAOX,EAAW,CAAEa,YAAa,2BA0CFD,GAClCF,wBAAcJ,EAAQ,CAAEL,qBCzCxBa,EAAY,SAAAf,GAAA,IAAGG,EAAHH,EAAGG,QAASD,EAAZF,EAAYE,SAAUc,EAAtBhB,EAAsBgB,OAAtB,OAChBP,EAAAC,EAAAC,cAACM,EAAD,CAAed,QAASA,EAASe,UAAWF,GACzC,SAAAR,GAAK,OAAIG,yBALGV,EAKoBC,EAJnCG,OAAOO,OAAOX,EAAW,CAAEa,YAAa,uBAIMN,GAL/B,IAAAP,KAajBc,EAAUI,aAAe,CACvBH,QAAQ,GAGKD,QCVAK,EARA,SAAApB,GAAA,IAAGgB,EAAHhB,EAAGgB,OAAH,OACbP,EAAAC,EAAAC,cAACU,EAAD,CAAWlB,QAAS,kBAAMmB,OAAOC,MAAM,gBAAgBP,OAAQA,GAC5D,SAAAQ,GAAA,IAAGjB,EAAHiB,EAAGjB,OAAQhB,EAAXiC,EAAWjC,MAAX,OACCkB,EAAAC,EAAAC,cAACJ,EAAD,CAAQhB,MAAKc,OAAAoB,EAAA,EAAApB,CAAA,GAAOd,EAAP,CAAcmC,WAAY,WAAvC,aCKSC,EARC,kBACdlB,EAAAC,EAAAC,cAACM,EAAD,CAAed,QAAS,kBAAMmB,OAAOC,MAAM,kBACxC,SAAAvB,GAAA,IAAGO,EAAHP,EAAGO,OAAQhB,EAAXS,EAAWT,MAAX,OACCkB,EAAAC,EAAAC,cAACJ,EAAD,CAAQhB,MAAKc,OAAAoB,EAAA,EAAApB,CAAA,GAAOd,EAAP,CAAcmC,WAAY,UAAvC,cCaSE,EAhBI,SAAA5B,GAAA,IAAGgB,EAAHhB,EAAGgB,OAAH,OACjBP,EAAAC,EAAAC,cAACU,EAAD,CAAWlB,QAAS,kBAAMmB,OAAOC,MAAM,kBAAkBP,OAAQA,GAC9D,SAAAQ,GAAA,IAAGjB,EAAHiB,EAAGjB,OAAQhB,EAAXiC,EAAWjC,MAAX,OACCkB,EAAAC,EAAAC,cAACJ,EAAD,CACEhB,MAAKc,OAAAoB,EAAA,EAAApB,CAAA,GACAd,EADA,CAEHK,SAAQ,GAAAR,OAAKyC,SAAStC,EAAMK,SAAU,IAAM,EAApC,MACR8B,WAAY,YAJhB,kBCHAI,EAAM,wCAiCGC,EA7BD,WAAM,IAAAC,EACYC,oBAAS,GADrBC,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAA2B,EAAA,GACXI,EADWF,EAAA,GACFG,EADEH,EAAA,GAEZI,EAAO,kBAAMD,GAAW,IAI9B,OAFAE,oBAAU,kBANQC,EAMUV,EANHzB,OAAOO,OAAO,IAAI6B,MAAS,CAAED,SAMrBE,iBAAiB,OAAQJ,GAAM,GAN9C,IAAAE,GAMqD,IAGrE/B,EAAAC,EAAAC,cAACM,EAAD,KACG,SAAAjB,GAAA,IAAGrB,EAAHqB,EAAGrB,MAAOY,EAAVS,EAAUT,MAAV,OACC6C,EACE3B,EAAAC,EAAAC,cAAA,KAAGpB,MAAKc,OAAAoB,EAAA,EAAApB,CAAA,GAAOd,EAAP,CAAcC,OAAQ,OAAQE,OAAQ,aAA9C,oBAIAe,EAAAC,EAAAC,cAAA,SACEgC,KAAK,QACLH,IAAKV,EACLc,IAAI,kBACJzC,QAASxB,EAAM,kBAAM2C,OAAOC,MAAM,mBAClCsB,YAAalE,EAAM,iBAAM,sBACzBmE,WAAYnE,EAAM,iBAAM,qBACxBY,MAAKc,OAAAoB,EAAA,EAAApB,CAAA,GAAOd,EAAP,CAAcO,QAAS,WCJzBiD,EAjBH,WAAM,IAAAf,EACYC,oBAAS,GADrBC,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAA2B,EAAA,GACThB,EADSkB,EAAA,GACDc,EADCd,EAAA,GAIhB,OACEzB,EAAAC,EAAAC,cAACsC,EAAA,SAAD,KACExC,EAAAC,EAAAC,cAACM,EAAD,CAAed,QAJM,kBAAM6C,EAAU,SAAAE,GAAO,OAAKA,MAIjD,kBACiBzC,EAAAC,EAAAC,cAAA,6BAEjBF,EAAAC,EAAAC,cAACwC,EAAD,CAAQnC,OAAQA,IAChBP,EAAAC,EAAAC,cAACyC,EAAD,MACA3C,EAAAC,EAAAC,cAAC0C,EAAD,CAAYrC,OAAQA,IACpBP,EAAAC,EAAAC,cAAC2C,EAAD,QCRcC,QACW,cAA7BjC,OAAOkC,SAASC,UAEe,UAA7BnC,OAAOkC,SAASC,UAEhBnC,OAAOkC,SAASC,SAASC,MACvB,2DCXNC,iBAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD0HlC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d14d3b69.chunk.js","sourcesContent":["import React, { useCallback, createElement } from \"react\";\nimport { oneOfType, node, func } from \"prop-types\";\n\nconst isComponent = object => typeof object === \"function\";\n\nconst identify = component =>\n  Object.assign(component, { displayName: \"Custom(GenericButton)\" });\n\nconst stringify = callback =>\n  String(callback)\n    .replace(/\\r?\\n|\\r/g, \"\")\n    .replace(/\\s+/g, \" \");\n\nconst print = string =>\n  console.log(\n    `Your callback %c${string}%c was triggered`,\n    \"background-color: red; color: white; font-weight: bold; padding: 5px;\",\n    \"background-color: inherit; color: inherit; font-weight: inherit; padding: inherit;\"\n  );\n\nconst track = callback =>\n  useCallback(\n    (...params) => print(stringify(callback)) || callback(...params),\n    [callback]\n  );\n\nconst style = {\n  border: \"solid 1px black\",\n  borderRadius: \"5px\",\n  cursor: \"pointer\",\n  display: \"block\",\n  fontSize: \"20px\",\n  margin: \"20px 0\",\n  padding: \"10px\"\n};\n\nconst GenericButton = ({ children, onClick, ...enhancement }) => {\n  const Button = props => (\n    <button\n      onClick={track(onClick)}\n      style={style}\n      {...props}\n      {...enhancement}\n    />\n  );\n  const pieces = { Button, track, style };\n\n  return isComponent(children)\n    ? createElement(identify(children), pieces)\n    : createElement(Button, { children });\n};\n\nGenericButton.propTypes = {\n  children: oneOfType([node, func]).isRequired,\n  onClick: func\n};\n\nexport default GenericButton;\n","import React, { createElement } from \"react\";\nimport { bool } from \"prop-types\";\n\nimport GenericButton from \"components/GenericButton\";\n\nconst identify = component =>\n  Object.assign(component, { displayName: \"Custom(Activable)\" });\n\nconst Activable = ({ onClick, children, active }) => (\n  <GenericButton onClick={onClick} disabled={!active}>\n    {props => createElement(identify(children), props)}\n  </GenericButton>\n);\n\nActivable.propTypes = {\n  active: bool\n};\n\nActivable.defaultProps = {\n  active: true\n};\n\nexport default Activable;\n","import React from \"react\";\n\nimport Activable from \"components/Activable\";\n\nconst Simple = ({ active }) => (\n  <Activable onClick={() => window.alert(\"openCart();\")} active={active}>\n    {({ Button, style }) => (\n      <Button style={{ ...style, background: \"green\" }}>Button</Button>\n    )}\n  </Activable>\n);\n\nexport default Simple;\n","import React from \"react\";\n\nimport GenericButton from \"components/GenericButton\";\n\nconst ClickMe = () => (\n  <GenericButton onClick={() => window.alert(\"closePage();\")}>\n    {({ Button, style }) => (\n      <Button style={{ ...style, background: \"blue\" }}>ClickMe</Button>\n    )}\n  </GenericButton>\n);\n\nexport default ClickMe;\n","import React from \"react\";\n\nimport Activable from \"components/Activable\";\n\nconst CloseModal = ({ active }) => (\n  <Activable onClick={() => window.alert(\"closeModal();\")} active={active}>\n    {({ Button, style }) => (\n      <Button\n        style={{\n          ...style,\n          fontSize: `${parseInt(style.fontSize, 10) / 2}px`,\n          background: \"orange\"\n        }}\n      >\n        Close Modal\n      </Button>\n    )}\n  </Activable>\n);\n\nexport default CloseModal;\n","import React, { useState, useEffect } from \"react\";\n\nimport GenericButton from \"components/GenericButton\";\n\nconst URL = \"https://www.placecage.com/gif/180/180\";\n\nconst createImage = src => Object.assign(new Image(), { src });\n\nconst Input = () => {\n  const [loading, setLoading] = useState(true);\n  const load = () => setLoading(false);\n\n  useEffect(() => createImage(URL).addEventListener(\"load\", load, true), []);\n\n  return (\n    <GenericButton>\n      {({ track, style }) =>\n        loading ? (\n          <p style={{ ...style, border: \"none\", cursor: \"default\" }}>\n            Loading image...\n          </p>\n        ) : (\n          <input\n            type=\"image\"\n            src={URL}\n            alt=\"Image as button\"\n            onClick={track(() => window.alert(\"clickImage();\"))}\n            onMouseOver={track(() => \"mouseOverImage();\")}\n            onMouseOut={track(() => \"mouseOutImage();\")}\n            style={{ ...style, padding: \"0\" }}\n          />\n        )\n      }\n    </GenericButton>\n  );\n};\n\nexport default Input;\n","import React, { useState, Fragment } from \"react\";\n\nimport GenericButton from \"components/GenericButton\";\nimport Simple from \"components/Simple\";\nimport ClickMe from \"components/ClickMe\";\nimport CloseModal from \"components/CloseModal\";\nimport Input from \"components/Input\";\n\nconst App = () => {\n  const [active, setActive] = useState(false);\n  const toggleActiveness = () => setActive(current => !current);\n\n  return (\n    <Fragment>\n      <GenericButton onClick={toggleActiveness}>\n        Toggle buttons <strong>activeness</strong>\n      </GenericButton>\n      <Simple active={active} />\n      <ClickMe />\n      <CloseModal active={active} />\n      <Input />\n    </Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\n\nimport App from \"components/App\";\n\nimport { unregister } from \"./serviceWorker\";\n\nrender(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nunregister();\n"],"sourceRoot":""}
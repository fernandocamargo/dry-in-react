{"version":3,"sources":["components/GenericButton.js","components/Button.js","components/ClickMe.js","components/CloseModal.js","components/Image.js","serviceWorker.js","index.js","components/App.js"],"names":["track","callback","useCallback","string","String","replace","stringify","console","log","concat","apply","arguments","GenericButton","_ref","children","onClick","style","fontSize","Button","props","react_default","a","createElement","Object","assign","active","components_GenericButton","window","alert","_ref2","objectSpread","background","disabled","defaultProps","ClickMe","CloseModal","URL","components_Image","_useState","useState","_useState2","slicedToArray","loading","setLoading","load","useEffect","src","Image","addEventListener","type","alt","onMouseOver","onMouseOut","Boolean","location","hostname","match","render","components_Button","components_CloseModal","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.088d0e86.chunk.js","sourcesContent":["import React, { useCallback, createElement } from \"react\";\nimport { oneOfType, node, func } from \"prop-types\";\n\nconst isComponent = object => typeof object === \"function\";\n\nconst stringify = callback =>\n  String(callback)\n    .replace(/\\r?\\n|\\r/g, \"\")\n    .replace(/\\s+/g, \" \");\n\nconst print = string =>\n  console.log(\n    `Your callback %c${string}%c was triggered`,\n    \"background-color: #353740; color: #a6e22e; font-weight: bold; padding: 5px;\",\n    \"background-color: inherit; color: inherit; font-weight: inherit; padding: inherit;\"\n  );\n\nconst track = callback =>\n  useCallback(\n    (...params) => print(stringify(callback)) || callback(...params),\n    [callback]\n  );\n\nconst GenericButton = ({ children, onClick }) => {\n  const style = { fontSize: 20 };\n  const Button = useCallback(\n    props => <button onClick={track(onClick)} style={style} {...props} />,\n    []\n  );\n\n  return isComponent(children)\n    ? createElement(children, { Button, track, style })\n    : createElement(Button, { children });\n};\n\nGenericButton.propTypes = {\n  children: oneOfType([node, func]).isRequired,\n  onClick: func\n};\n\nexport default GenericButton;\n","import React, { useCallback } from \"react\";\nimport { bool } from \"prop-types\";\n\nimport GenericButton from \"components/GenericButton\";\n\nconst Button = ({ active }) => (\n  <GenericButton onClick={() => window.alert(\"openCart();\")}>\n    {useCallback(\n      ({ Button, style }) => (\n        <Button style={{ ...style, background: \"green\" }} disabled={!active}>\n          Button\n        </Button>\n      ),\n      []\n    )}\n  </GenericButton>\n);\n\nButton.propTypes = {\n  active: bool\n};\n\nButton.defaultProps = {\n  active: true\n};\n\nexport default Button;\n","import React, { useCallback } from \"react\";\n\nimport GenericButton from \"components/GenericButton\";\n\nexport default () => (\n  <GenericButton onClick={() => window.alert(\"closePage();\")}>\n    {useCallback(\n      ({ Button, style }) => (\n        <Button style={{ ...style, background: \"blue\" }}>ClickMe</Button>\n      ),\n      []\n    )}\n  </GenericButton>\n);\n","import React, { useCallback } from \"react\";\nimport { bool } from \"prop-types\";\n\nimport GenericButton from \"components/GenericButton\";\n\nconst CloseModal = ({ active }) => (\n  <GenericButton onClick={() => window.alert(\"closeModal();\")}>\n    {useCallback(\n      ({ Button, style }) => (\n        <Button\n          style={{\n            ...style,\n            fontSize: style.fontSize / 2,\n            background: \"green\"\n          }}\n          disabled={!active}\n        >\n          Close Modal\n        </Button>\n      ),\n      []\n    )}\n  </GenericButton>\n);\n\nCloseModal.propTypes = {\n  active: bool\n};\n\nCloseModal.defaultProps = {\n  active: true\n};\n\nexport default CloseModal;\n","import React, { useState, useEffect, useCallback } from \"react\";\n\nimport GenericButton from \"components/GenericButton\";\n\nconst URL = \"https://www.placecage.com/gif/180/180\";\n\nconst createImage = src => Object.assign(new Image(), { src });\n\nexport default () => {\n  const [loading, setLoading] = useState(true);\n  const load = useCallback(() => setLoading(false), []);\n\n  useEffect(() => createImage(URL).addEventListener(\"load\", load, true), []);\n\n  return (\n    <GenericButton>\n      {useCallback(\n        ({ track, style }) =>\n          loading ? (\n            <span style={style}>Loading image...</span>\n          ) : (\n            <input\n              type=\"image\"\n              src={URL}\n              alt=\"Image as button\"\n              onClick={track(() => window.alert(\"clickImage();\"))}\n              onMouseOver={track(() => window.alert(\"mouseOverImage();\"))}\n              onMouseOut={track(() => window.alert(\"mouseOutImage();\"))}\n            />\n          ),\n        [loading]\n      )}\n    </GenericButton>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\n\nimport App from \"components/App\";\n\nimport { unregister } from \"./serviceWorker\";\n\nrender(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nunregister();\n","import React from \"react\";\n\nimport GenericButton from \"components/GenericButton\";\nimport Button from \"components/Button\";\nimport ClickMe from \"components/ClickMe\";\nimport CloseModal from \"components/CloseModal\";\nimport Image from \"components/Image\";\n\nexport default () => (\n  <div>\n    <GenericButton onClick={() => window.alert(\"nonCustomized();\")}>\n      Simple as possible\n    </GenericButton>\n    <Button />\n    <ClickMe />\n    <CloseModal active={false} />\n    <Image />\n  </div>\n);\n"],"sourceRoot":""}